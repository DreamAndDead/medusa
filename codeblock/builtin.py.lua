dofile('./polyfill/pypolyfill.lua')
assert((abs(10) == 10))
assert((abs(0) == 0))
assert((abs((-10)) == 10))
assert((abs(1.07) == 1.07))
assert((abs((-0.52)) == 0.52))
assert((all(list {}) == true))
assert((all(list {1, 2}) == true))
assert((all(list {0, 1, 2}) == false))
assert((all(list {0, 0}) == false))
assert((any(list {}) == false))
assert((any(list {1, 2}) == true))
assert((any(list {0, 1, 2}) == true))
assert((any(list {0, 0}) == false))
assert((bin(0) == "0b0"))
assert((bin(10) == "0b1010"))
assert((bin(100) == "0b1100100"))
assert((bin(1000) == "0b1111101000"))
assert(bool(true))
assert(bool(1))
assert(bool("abc"))
assert(bool(list {1, 2}))
assert(not bool(false))
assert(not bool(list {}))
assert(not bool(""))
assert(not bool(0))
assert(callable(abs))
assert(callable(function(x) return x end))
assert(not callable(0))
assert(not callable("abc"))
assert(not callable(list {}))
local d, m = divmod(10, 3)
assert(((d == 3) and (m == 1)))
d, m = divmod((-10), 3)
assert(((d == (-4)) and (m == 2)))
d, m = divmod(10, (-3))
assert(((d == (-4)) and (m == (-2))))
d, m = divmod((-10), (-3))
assert(((d == 3) and (m == (-1))))
local l = list {0, 1, 2, 3, 4}
for i, n in enumerate(l) do
    assert((i == n))
end
assert((float(10) == 10.0))
assert((float(10.4) == 10.4))
assert((float("12") == 12.0))
assert((float("10.8") == 10.8))
assert((hex(0) == "0x0"))
assert((hex(10) == "0xa"))
assert((hex(100) == "0x64"))
assert((hex(1000) == "0x3e8"))
assert((hex(10000) == "0x2710"))
assert((hex(100000) == "0x186a0"))
assert((int() == 0))
assert((int(10) == 10))
assert((int(10.5) == 10))
assert((int((-10.5)) == (-10)))
assert((int("10", 10) == 10))
assert((int("10", 16) == 16))
assert((int(" 10", 10) == 10))
assert((int("10 ", 16) == 16))
assert((int("0b10", 0) == 2))
assert((int("0x10", 0) == 16))
assert((int("-0b10", 0) == (-2)))
assert((int("-0x10", 0) == (-16)))
assert((len("") == 0))
assert((len("abcd") == 4))
assert((len(list {}) == 0))
assert((len(list {1, 2, 3}) == 3))
assert((len(dict {}) == 0))
assert((len(dict {[0] = 0, ["a"] = "z"}) == 2))
assert((len(list()) == 0))
l = list(list {1, 2, 3})
assert((len(l) == 3))
assert((l[0] == 1))
assert((l[1] == 2))
assert((l[2] == 3))
assert((oct(0) == "0o0"))
assert((oct(10) == "0o12"))
assert((oct(100) == "0o144"))
assert((oct(1000) == "0o1750"))
assert((oct(10000) == "0o23420"))
assert((pow(2, 10) == 1024))
assert((pow(2, 9, 3) == 2))
l = (function() local result = list {} for i in range(10) do result.append(i) end return result end)()
assert((len(l) == 10))
assert((l[0] == 0))
assert((l[9] == 9))
l = (function() local result = list {} for i in range(1, 5) do result.append(i) end return result end)()
assert((len(l) == 4))
assert((l[0] == 1))
assert((l[1] == 2))
assert((l[2] == 3))
assert((l[3] == 4))
l = (function() local result = list {} for i in range(1, 9, 2) do result.append(i) end return result end)()
assert((len(l) == 4))
assert((l[0] == 1))
assert((l[1] == 3))
assert((l[2] == 5))
assert((l[3] == 7))
assert((round(10) == 10))
assert((round(10, 0) == 10))
assert((round(10, 1) == 10))
assert((round(10, 2) == 10))
assert((round(10, (-1)) == 10))
assert((round(10, (-2)) == 0))
assert((round(10.49, 0) == 10))
assert((round(10.51, 0) == 11))
assert((round(10.49, 1) == 10.5))
assert((round(10.51, 1) == 10.5))
assert((sum(list {1, 2, 3}) == 6))
assert((sum(list {}) == 0))
assert((sum(list {1, 2, 3}, 0) == 6))
assert((sum(list {1, 2, 3}, 4) == 10))
