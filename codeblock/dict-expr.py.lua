dofile('./polyfill/pypolyfill.lua')
local d = dict {[0] = "a", [1] = "b", ["c"] = 3}
local e = (function() local result = dict {} for k, v in d.items() do result[k] = v end return result end)()
local f = (function() local result = dict {} for k, v in d.items() do result[v] = k end return result end)()
assert((d[0] == e[0]))
assert((d[1] == e[1]))
assert((d["c"] == e["c"]))
assert((f["a"] == 0))
assert((f["b"] == 1))
assert((f[3] == "c"))
d = dict {[0] = 0, [1] = 1, [2] = 2}
e = (function() local result = dict {} for k, v in d.items() do result[k] = ((math.fmod(k, 2)) == 1) and v or 10 end return result end)()
assert((e[0] == 10))
assert((e[1] == 1))
assert((e[2] == 10))
f = (function() local result = dict {} for k, v in d.items() do result[(v == 0) and k or (v + 1)] = ((math.fmod(k, 2)) == 1) and v or 10 end return result end)()
assert((f[0] == 10))
assert((f[2] == 1))
assert((f[3] == 10))
d = dict {[0] = 0, [1] = 1, [2] = 2}
e = (function() local result = dict {} for k, v in d.items() do if (k > 1) then result[k] = v end end return result end)()
assert((not operator_in(0, e)))
assert((not operator_in(1, e)))
assert((operator_in(2, e)))
assert((e[2] == 2))
local l = list {0, 1, 2}
local a = list {"a", "b"}
d = (function() local result = dict {} for k in l do for v in a do result[k] = v end end return result end)()
assert((d[0] == "b"))
assert((d[1] == "b"))
assert((d[2] == "b"))
d = dict {[0] = dict {["a"] = 1, ["b"] = 2}, [1] = dict {["c"] = 3, ["d"] = 4}}
e = (function() local result = dict {} for k, v in d.items() do for nk, nv in v.items() do result[nk] = nv end end return result end)()
assert((e["a"] == 1))
assert((e["b"] == 2))
assert((e["c"] == 3))
assert((e["d"] == 4))
d = dict {[0] = dict {["a"] = 1, ["b"] = 2}, [1] = dict {["c"] = 3, ["d"] = 4}}
e = (function() local result = dict {} for k, v in d.items() do if ((math.fmod(k, 2)) == 0) then for nk, nv in v.items() do if (nv > 1) then result[nk] = ((math.fmod(nv, 2)) == 1) and nv or (nv + 1) end end end end return result end)()
assert((not operator_in("a", e)))
assert((operator_in("b", e)))
assert((e["b"] == 3))
assert((not operator_in("c", e)))
assert((not operator_in("d", e)))
