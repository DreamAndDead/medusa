local s = frozenset(set {_to_null(0, 1, 2, 3, nil)})
assert(bool((len(s) == 5)))
assert(bool((operator_in(0, s))))
assert(bool((operator_in(1, s))))
assert(bool((operator_in(2, s))))
assert(bool((operator_in(3, s))))
assert(bool((operator_in(nil, s))))
s = frozenset(set {_to_null(0, 1, 2, 3, nil)})
local sc = s.copy()
assert(bool((len(s) == 5)))
assert(bool((len(sc) == 5)))
assert(bool((operator_is(s, sc))))
local s1 = frozenset(set {_to_null(1, 2, 3, 4, 5, 6, nil)})
local s2 = frozenset(set {_to_null(2, 4, 6, 8, nil)})
local s3 = frozenset(set {_to_null(0, 10, 3)})
local s1_2 = s1.difference(s2)
assert(bool((len(s1_2) == 3)))
assert(bool((operator_in(1, s1_2))))
assert(bool((operator_in(3, s1_2))))
assert(bool((operator_in(5, s1_2))))
local s1_2_3 = s1.difference(s2, s3)
assert(bool((len(s1_2_3) == 2)))
assert(bool((operator_in(1, s1_2_3))))
assert(bool((operator_in(5, s1_2_3))))
s1 = frozenset(set {_to_null(1, 2, 3, 4, 5, 6, nil)})
s2 = frozenset(set {_to_null(2, 4, 6, 8, nil)})
s3 = frozenset(set {_to_null(0, 10, 3)})
local s1and2 = s1.intersection(s2)
assert(bool((len(s1and2) == 4)))
assert(bool((operator_in(2, s1and2))))
assert(bool((operator_in(4, s1and2))))
assert(bool((operator_in(6, s1and2))))
assert(bool((operator_in(nil, s1and2))))
assert(bool((not operator_in(1, s1and2))))
assert(bool((not operator_in(3, s1and2))))
assert(bool((not operator_in(5, s1and2))))
assert(bool((not operator_in(8, s1and2))))
local s1and2and3 = s1.intersection(s2, s3)
assert(bool((len(s1and2and3) == 0)))
s1 = frozenset(set {_to_null(1, 2, 3, 4, 5, 6, nil)})
s2 = frozenset(set {_to_null(2, 4, 6, 8, nil)})
s3 = frozenset(set {_to_null(0, 10, 3)})
assert(bool(not bool(s1.isdisjoint(s2))))
assert(bool(not bool(s1.isdisjoint(s3))))
assert(bool(s2.isdisjoint(s3)))
s1 = frozenset(set {_to_null(1, 2, 3, 4, 5, 6, nil)})
s2 = frozenset(set {_to_null(2, 4, 6, 8)})
s3 = frozenset(set {_to_null(0, 10, 3)})
local s4 = frozenset(set {_to_null(2, 6)})
assert(bool(s1.issubset(s1)))
assert(bool(not bool(s1.issubset(s2))))
assert(bool(not bool(s1.issubset(s3))))
assert(bool(not bool(s1.issubset(s4))))
assert(bool(s4.issubset(s1)))
assert(bool(s4.issubset(s2)))
assert(bool(not bool(s4.issubset(s3))))
assert(bool(s4.issubset(s4)))
s1 = frozenset(set {_to_null(1, 2, 3, 4, 5, 6, nil)})
s2 = frozenset(set {_to_null(2, 4, 6, 8)})
s3 = frozenset(set {_to_null(0, 10, 3)})
s4 = frozenset(set {_to_null(2, 6)})
assert(bool(s1.issuperset(s1)))
assert(bool(not bool(s1.issuperset(s2))))
assert(bool(not bool(s1.issuperset(s3))))
assert(bool(s1.issuperset(s4)))
assert(bool(not bool(s4.issuperset(s1))))
assert(bool(not bool(s4.issuperset(s2))))
assert(bool(not bool(s4.issuperset(s3))))
assert(bool(s4.issuperset(s4)))
s1 = frozenset(set {_to_null(1, 2, 3, 4, 5, 6)})
s2 = frozenset(set {_to_null(2, 4, 6, 8)})
s3 = frozenset(set {_to_null(0, 10, 3)})
s4 = frozenset(set {_to_null(2, 6)})
local s1_sym_s1 = s1.symmetric_difference(s1)
local s1_sym_s2 = s1.symmetric_difference(s2)
local s1_sym_s3 = s1.symmetric_difference(s3)
local s1_sym_s4 = s1.symmetric_difference(s4)
assert(bool((len(s1_sym_s1) == 0)))
assert(bool((len(s1_sym_s2) == 4)))
assert(bool((operator_in(1, s1_sym_s2))))
assert(bool((operator_in(3, s1_sym_s2))))
assert(bool((operator_in(5, s1_sym_s2))))
assert(bool((operator_in(8, s1_sym_s2))))
assert(bool((len(s1_sym_s3) == 7)))
assert(bool((operator_in(1, s1_sym_s3))))
assert(bool((operator_in(2, s1_sym_s3))))
assert(bool((operator_in(4, s1_sym_s3))))
assert(bool((operator_in(5, s1_sym_s3))))
assert(bool((operator_in(6, s1_sym_s3))))
assert(bool((operator_in(0, s1_sym_s3))))
assert(bool((operator_in(10, s1_sym_s3))))
assert(bool((len(s1_sym_s4) == 4)))
assert(bool((operator_in(1, s1_sym_s4))))
assert(bool((operator_in(3, s1_sym_s4))))
assert(bool((operator_in(4, s1_sym_s4))))
assert(bool((operator_in(5, s1_sym_s4))))
s1 = frozenset(set {_to_null(1, 2, 3, 4, 5, 6)})
s2 = frozenset(set {_to_null(2, 4, 6, 8)})
s3 = frozenset(set {_to_null(0, 10, 3)})
local s1_union_s2s3 = s1.union(s2, s3)
assert(bool((len(s1_union_s2s3) == 9)))
assert(bool((operator_in(1, s1_union_s2s3))))
assert(bool((operator_in(2, s1_union_s2s3))))
assert(bool((operator_in(3, s1_union_s2s3))))
assert(bool((operator_in(4, s1_union_s2s3))))
assert(bool((operator_in(5, s1_union_s2s3))))
assert(bool((operator_in(6, s1_union_s2s3))))
assert(bool((operator_in(8, s1_union_s2s3))))
assert(bool((operator_in(0, s1_union_s2s3))))
assert(bool((operator_in(10, s1_union_s2s3))))
return {
    s = s,
    sc = sc,
    s1 = s1,
    s2 = s2,
    s3 = s3,
    s1_2 = s1_2,
    s1_2_3 = s1_2_3,
    s1and2 = s1and2,
    s1and2and3 = s1and2and3,
    s4 = s4,
    s1_sym_s1 = s1_sym_s1,
    s1_sym_s2 = s1_sym_s2,
    s1_sym_s3 = s1_sym_s3,
    s1_sym_s4 = s1_sym_s4,
    s1_union_s2s3 = s1_union_s2s3,
}
