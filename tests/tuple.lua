local t = tuple(list {_to_null(1, 2, 3, nil)})
assert(bool((len(t) == 4)))
assert(bool((t[_to_null(0)] == 1)))
assert(bool((t[_to_null(1)] == 2)))
assert(bool((t[_to_null(2)] == 3)))
assert(bool((t[_to_null(3)] == nil)))
t = tuple(list {_to_null(1, "a", "z", "pi", "a", "c", "c", nil)})
assert(bool((t.count(1) == 1)))
assert(bool((t.count("a") == 2)))
assert(bool((t.count("b") == 0)))
assert(bool((t.count("c") == 2)))
assert(bool((t.count(nil) == 1)))
t = tuple(list {_to_null(1, "a", "z", "pi", "a", "c", "c")})
assert(bool((t.index("a") == 1)))
assert(bool((t.index("a", 0) == 1)))
assert(bool((t.index("a", 1) == 1)))
assert(bool((t.index("a", 2) == 4)))
assert(bool((t.index("a", 3) == 4)))
assert(bool((t.index("a", 4) == 4)))
assert(bool((t.index("a", 1, 4) == 1)))
assert(bool((t.index("a", 2, 5) == 4)))
t = tuple(list {_to_null(4, 1, 2, 0, 3)})
assert(bool((operator_in(0, t))))
assert(bool((not operator_in(5, t))))
local t1 = tuple(list {_to_null(4, 1, 2, 0, 3)})
local t2 = tuple(list {_to_null(4, 1, 2, 0, 3)})
t = (t1 + t2)
assert(bool((len(t) == 10)))
assert(bool((t[_to_null(0)] == 4)))
assert(bool((t[_to_null(1)] == 1)))
assert(bool((t[_to_null(2)] == 2)))
assert(bool((t[_to_null(3)] == 0)))
assert(bool((t[_to_null(4)] == 3)))
assert(bool((t[_to_null(5)] == 4)))
assert(bool((t[_to_null(6)] == 1)))
assert(bool((t[_to_null(7)] == 2)))
assert(bool((t[_to_null(8)] == 0)))
assert(bool((t[_to_null(9)] == 3)))
t1 = tuple(list {_to_null(4, 1, 2, 0, 3)})
t = (t1 * 2)
assert(bool((len(t) == 10)))
assert(bool((t[_to_null(0)] == 4)))
assert(bool((t[_to_null(1)] == 1)))
assert(bool((t[_to_null(2)] == 2)))
assert(bool((t[_to_null(3)] == 0)))
assert(bool((t[_to_null(4)] == 3)))
assert(bool((t[_to_null(5)] == 4)))
assert(bool((t[_to_null(6)] == 1)))
assert(bool((t[_to_null(7)] == 2)))
assert(bool((t[_to_null(8)] == 0)))
assert(bool((t[_to_null(9)] == 3)))
t = tuple(list {_to_null(4, 1, 2, 0, 3)})
assert(bool((t[_to_null(0)] == 4)))
local ts = t[slice(1, 2, nil)]
assert(bool((len(ts) == 1)))
assert(bool((ts[_to_null(0)] == 1)))
local ts2 = t[slice(1, 5, 2)]
assert(bool((len(ts2) == 2)))
assert(bool((ts2[_to_null(0)] == 1)))
assert(bool((ts2[_to_null(1)] == 0)))
return {
    t = t,
    t1 = t1,
    t2 = t2,
    ts = ts,
    ts2 = ts2,
}
